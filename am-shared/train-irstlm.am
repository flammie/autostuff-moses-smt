## Include this file to automake project for language model training
## from text-files

## Copyright (c) 2014 Dublin City University / CNGL

## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.

## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.

## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <http://www.gnu.org/licenses/>.

# L1 should be set to short language code of simpler language, e.g. 'en'
# L2 should be set to short language code of morphological language, .e.g. 'fi'


# Train truecaser from tokenised text
%.truecaser.$(L1): %.tok.$(L1)
	$(MOSES_TRAIN_TRUECASER) --model $@ --corpus $<

%.truecaser.$(L2): %.tok.$(L2)
	$(MOSES_TRAIN_TRUECASER) --model $@ --corpus $<

# Baseline processing: tokenise, truecase, clean
# added: remove-non-printing

# Tokenising
%.tok.$(L1): %.$(L1).text
	$(MOSES_REMOVE_NON_PRINTING_CHAR) < $< |\
		$(MOSES_TOKENIZER) $(TOKENIZER_FLAGS) -l $(L1) > $@

%.tok.$(L2): %.$(L2).text
	$(MOSES_REMOVE_NON_PRINTING_CHAR) < $< |\
		$(MOSES_TOKENIZER) $(TOKENIZER_FLAGS) -l $(L2) > $@

# Complex lang needs a bit more
# ... these are kind of hacks to fix some broken pre-proc
%.nomarkers.tok.$(L2): %.morfs.$(L2)
	$(MOSES_TOKENIZER) -l $(L2) < $< |\
		sed -e 's/[[:space:]]*→/→/g' -e 's/←[[:space:]]*/←/g' \
		-e 's/→←/→ ←/g' -e 's/[→←]//g' > $@

%.spaceplusspace.tok.$(L2): %.morfs.$(L2)
	$(MOSES_TOKENIZER) -l $(L2) < $< |\
		sed -e 's/[[:space:]]*→/→/g' -e 's/←[[:space:]]*/←/g' \
		-e 's/→←/→ ←/g' -e 's/→ ←/ + /g' > $@

%.suffixmarkered.tok.$(L2): %.morfs.$(L2)
	$(MOSES_TOKENIZER) -l $(L2) < $< |\
		sed -e 's/[[:space:]]*→/→/g' -e 's/←[[:space:]]*/←/g' \
		-e 's/→←/→ ←/g' -e 's/→ ←/ ←/g' > $@


# Truecasing
%.true.$(L1): %.tok.$(L1) $(TRUECASE_BASELINE_L1)
	$(MOSES_TRUECASE) --model $(TRUECASE_BASELINE_L1) < $< > $@

%.true.$(L2): %.tok.$(L2) $(TRUECASE_BASELINE_L2)
	$(MOSES_TRUECASE) --model $(TRUECASE_BASELINE_L2) < $< > $@

# Cleaning
# XXX: bit of hacks to keep timestamps in order
%.clean.$(L2).$(L2): %.true.$(L2) %.true.$(L1)
	$(MOSES_CLEAN_CORPUS_N) $*.true $(L2) $(L1) $*.clean.$(L2) 1 80

%.clean.$(L1).$(L1): %.true.$(L2) %.true.$(L1)
	$(MOSES_CLEAN_CORPUS_N) $*.true $(L1) $(L2) $*.clean.$(L1) 1 80

%.clean.$(L2): %.clean.$(L2).$(L2)
	cp -v $< $@

%.clean.$(L1): %.clean.$(L1).$(L1)
	cp -v $< $@

# Sentence boundaries
# extra deps unused to act as BARRIER for parallel build
%.sb.$(L2): %.clean.$(L2) %.clean.$(L1)
	$(IRSTLM_ADD_START_END) < $*.clean.$(L2) > $@

%.sb.$(L1): %.clean.$(L1) %.clean.$(L2)
	$(IRSTLM_ADD_START_END) < $*.clean.$(L1) > $@

# Language models and binarising
%.lm.$(L2).gz: %.sb.$(L2)
	if test -f $@ ; then \
		rm -rf $@ ;\
	fi
	@abs_top_builddir@/$(IRSTLM_BUILD_LM_FIXED) -i $*.sb.$(L2) -p -s improved-kneser-ney -o $@

%.lm.$(L1).gz: %.sb.$(L1)
	if test -f $@ ; then \
		rm -rf $@ ;\
	fi
	@abs_top_builddir@/$(IRSTLM_BUILD_LM_FIXED) -i $*.sb.$(L1) -p -s improved-kneser-ney -o $@

%.arpa.$(L2): %.lm.$(L2).gz
	$(IRSTLM_COMPILE_LM) --text=yes $<
	mv $*.lm.$(L2).lm $@

%.arpa.$(L1): %.lm.$(L1).gz
	$(IRSTLM_COMPILE_LM) --text=yes $<
	mv $*.lm.$(L1).lm $@

%.blm.$(L2): %.arpa.$(L2)
	$(MOSES_BUILD_BINARY) -i $< $@.bin
	touch $@

%.blm.$(L1): %.arpa.$(L1)
	$(MOSES_BUILD_BINARY) -i $< $@.bin
	touch $@

# morfessor train
%.morfclean.$(L2): %.true.$(L2)
	$(SED) -e 's/&amp;/\&/g' -e "s/&apos;/'/g" -e 's/&gt;/>/g' \
		-e 's/&lt;/</g' -e 's/&quot;/"/g' < $< > $@

%.$(L2).morfessor: %.morfclean.$(L2)
	$(MORFESSOR_TRAIN)  $< -s $@

%.$(L2).damplog.morfessor: %.morfclean.$(L2)
	$(MORFESSOR_TRAIN)  -d log $< -s $@

%.$(L2).dampones.morfessor: %.morfclean.$(L2)
	$(MORFESSOR_TRAIN)  -d ones $< -s $@


%.$(L2).morfessed-1.0: %.morfclean.$(L2)
	$(SED) -e 's/&amp;/\&/g' -e "s/&apos;/'/g" -e 's/&gt;/>/g' \
		-e 's/&lt;/</g' -e 's/&quot;/"/g' < $< |\
		$(MORFESSOR_TRAIN)  $< -S $@

%.$(L2).dampones.morfessed-1.0: %.morfclean.$(L2)
	$(SED) -e 's/&amp;/\&/g' -e "s/&apos;/'/g" -e 's/&gt;/>/g' \
		-e 's/&lt;/</g' -e 's/&quot;/"/g' < $< |\
		$(MORFESSOR_TRAIN) -d ones $< -S $@

%.$(L2).damplog.morfessed-1.0: %.morfclean.$(L2)
	$(SED) -e 's/&amp;/\&/g' -e "s/&apos;/'/g" -e 's/&gt;/>/g' \
		-e 's/&lt;/</g' -e 's/&quot;/"/g' < $< |\
		$(MORFESSOR_TRAIN) -d log $< -S $@

%.flatcat: %.morfessed-1.0
	$(MORFESSOR_FLATCAT_TRAIN) --perplexity-threshold 10 -s $@ -S $*.flatcat.ini --category-separator ////// $<

%.ppt-100.flatcat: %.morfessed-1.0
	$(MORFESSOR_FLATCAT_TRAIN) --perplexity-threshold 100 -s $@ -S $*.ppt-100.flatcat.ini --category-separator ////// $<


# vim: set ft=automake:
